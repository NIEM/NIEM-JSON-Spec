#############################################################################
# Don't touch these...
#############################################################################

this_makefile := ${lastword ${MAKEFILE_LIST}}
SHELL = @bash@ -o pipefail -o errexit -o nounset
.SECONDARY:
.DELETE_ON_ERROR:

#############################################################################
# things to set / override
#############################################################################

#HELP:Build file for @PACKAGE_NAME@ (@PACKAGE_TARNAME@)

#############################################################################
# dirs

srcdir = @srcdir@
builddir = @builddir@
publish_dir = ${builddir}/publish

#############################################################################
# COMMANDS

# Autoconf stuff
MKDIR_P = @MKDIR_P@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
SED = @SED@
# Unix commands
aspell = @aspell@
cat = @cat@
fgrep = @fgrep@
m4 = @m4@
sort = @sort@
# webb commands
process_doc = @process_doc@

#############################################################################
# files

dependencies_mk := ${builddir}/build/dependencies.mk
config_files = @config_files@

m4_required_files = ${srcdir}/src/macros.m4
m4_flags = --prefix-builtins --include=${builddir}/build ${m4_required_files}

doc_name = niem-json-spec

all_files = ${publish_dir}/${doc_name}.html \
  ${publish_dir}/${doc_name}.txt \

#############################################################################
# depend

#HELP:Variable 'depend':
#HELP:   'build': Build new dependencies file
#HELP:   anything else: Include dependencies if they exist (the default)
depend = include-if-present

ifeq (${depend},build)
.DEFAULT_GOAL = depend

.PHONY: depend #   Build dependencies file
depend: ${dependencies_mk}

${dependencies_mk}: ${builddir}/build/niem-json-spec.xml
	@ ${MKDIR_P} ${dir $@}
	${process_doc} --in=$< --out=$@ --format=makedepend

else
#HELP:Default target is "all". Targets include:
.DEFAULT_GOAL = all

# don't include if it doesn't exist, so that 'make clean' works w/o rebuilding dependencies
ifeq (${wildcard ${dependencies_mk}},${dependencies_mk})
include ${dependencies_mk}
endif

.PHONY: depend
depend:
	@ echo "Run \"make depend=build\" to rebuild dependencies." >&2

endif

#############################################################################
# real targets

.PHONY: all #   Build everything
all: ${all_files}

.PHONY: clean #   Remove built files
clean:
	${RM} ${all_files}
	${RM} -r ${builddir}/build

.PHONY: distclean #   Clean all build and configure products
distclean: clean
	${RM} ${dependencies_mk} ${config_files} config.log config.status

#############################################################################
# build

${publish_dir}/%: ${builddir}/build/%
	${MKDIR_P} ${dir $@}
	${INSTALL_DATA} $< $@

${builddir}/build/${doc_name}.html: ${builddir}/build/${doc_name}.xml ${doc_html_required_files}
	${process_doc} --format=html --in=$< --out=$@

${builddir}/build/${doc_name}.txt: ${builddir}/build/${doc_name}.xml ${doc_text_required_files}
	${process_doc} --format=text --in=$< --out=$@

${builddir}/build/%: ${builddir}/build/%.m4 ${m4_required_files}
	${MKDIR_P} ${dir $@}
	${m4} ${m4_flags} $< > $@
	@ if ${fgrep} MACRO_ $@; then echo found unexpanded macro in $@; false; fi

#############################################################################
# import from source

# import from src
${builddir}/build/%: ${srcdir}/src/%
	${MKDIR_P} ${dir $@}
	${INSTALL_DATA} $< $@

#############################################################################
# publish
# 
# .PHONY: publish #   Publish everything to $publish_dir (default @builddir@/publish)
# publish: ${publish_files}
# 
# .PHONY: unpublish #   Remove published files
# unpublish:
# 	${RM} ${publish_files}

#############################################################################
# check spelling

.PHONY: spell #   Check spelling of text doc
spell: ${builddir}/build/${doc_name}.txt
	${cat} $< \
	  | ${aspell} --home-dir=${srcdir}/src -p aspell-exceptions.txt list \
	  | ${sort} -uf \
	  > ${builddir}/build/aspell-results.txt
	if test -s ${builddir}/build/aspell-results.txt; then cat ${builddir}/build/aspell-results.txt; exit 1; fi

#############################################################################
# push to pages

pages_versions = v4.0alpha1 v4.0beta1 dev-4.0

.PHONY: pages #   Make gh-pages
pages:
	${RM} -R ${builddir}/build/gh-pages
	git clone --local --branch gh-pages .git ${builddir}/build/gh-pages
	git publish --verbose --force --target-dir=${builddir}/build/gh-pages --source-dir=publish ${pages_versions}
	git -C ${builddir}/build/gh-pages status -u
	@ [[ -z $$(git -C ${builddir}/build/gh-pages status --porcelain=v2) ]] || echo You should probably commit and clean up repo ${builddir}/build/gh-pages >&2

#############################################################################
# convenience targets

.PHONY: html #   Build HTML output
html: ${builddir}/build/${doc_name}.html

#############################################################################
# make help: this must be the last target

.PHONY: help #   Print this help
help:
	@ ${SED} -e '/^\.PHONY:/s/^\.PHONY: *\([^ #]*\) *\#\( *\)\([^ ].*\)/\2\1: \3/p;/^[^#]*#HELP:/s/[^#]*#HELP:\(.*\)/\1/p;d' ${this_makefile}

# don't put anything after this
